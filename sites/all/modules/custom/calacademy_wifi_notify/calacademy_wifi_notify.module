<?php

define('CALACADEMY_WIFI_NOTIFY_DEBUG', FALSE);
define('CALACADEMY_WIFI_NOTIFY_RECIPIENT', 'ipads-wifi@calacademy.org');
define('CALACADEMY_WIFI_NOTIFY_THROTTLE_HOURS', 12);

/**
 * Add some styles to hide the last notification timestamp field
 *
 * Implements hook_form_alter(&$form, &$form_state, $form_id)
 * @author grotter
 *
 * @param $form: Nested array of form elements that comprise the form.
 * @param $form_state: A keyed array containing the current state of the form.
 *        The arguments that drupal_get_form() was originally called with are
 *        available in the array $form_state['build_info']['args'].
 * @param $form_id: String representing the name of the form itself. Typically
 *        this is the name of the function that generated the form.
 */
function calacademy_wifi_notify_form_alter(&$form, &$form_state, $form_id) {
    if (isset($form['field_last_notification_sent']) && $form_id == 'taxonomy_form_term') {
        $modulePath = drupal_get_path('module', 'calacademy_wifi_notify');
        drupal_add_css($modulePath . '/css/calacademy_wifi_notify.css');
    }
}

function _calacademy_wifi_notify_is_empty($arr) {
    if (!is_array($arr)) return true;
    if (count($arr) == 0 || !isset($arr['und'])) return true;
    if (count($arr['und']) == 0) return true;

    return false;
}

function _calacademy_wifi_notify_is_notification_ready($term) {
    // already sending
    if ($term->sendingNotification) {
        $term->sendingNotification = FALSE;
        return false;
    }

    // not spotty
    if (_calacademy_wifi_notify_is_empty($term->field_is_wifi_spotty)) return false;
    
    // not spotty
    if ($term->field_is_wifi_spotty['und'][0]['value'] != '1') return false;

    // have we sent a notification already?
    if (!_calacademy_wifi_notify_is_empty($term->field_last_notification_sent)) {
        $lastSent = $term->field_last_notification_sent['und'][0]['value'];
        $diff = intval(time()) - intval($lastSent);
        
        // skip if last sent is sooner than 12 hours
        if (($diff / 3600) < CALACADEMY_WIFI_NOTIFY_THROTTLE_HOURS) {
            // dpm('now: ' . date('Y-m-d H:i:s'));
            // dpm('lastSent: ' . date('Y-m-d H:i:s', $lastSent));
            return false;
        }
    }
    
    // ready
    return true;
}

function calacademy_wifi_notify_taxonomy_term_presave($term) {
    switch ($term->vocabulary_machine_name) {
        case 'tanks_and_displays':
            if (_calacademy_wifi_notify_is_notification_ready($term)) {
                // something about this wifi spotty tank changed
                _calacademy_wifi_notify_send_notification($term);
            }
            break;
        case 'exhibit_theme':            
            // collect tids for this and all its parents and children
            $tids = array($term->tid);
            $terms = array_merge(taxonomy_get_parents($term->tid), taxonomy_get_children($term->tid));
            
            foreach ($terms as $fam) {
                if (isset($fam->tid)) {
                    $tids[] = $fam->tid;
                }
            }

            // find all spotty tanks with theme set as one of these
            $query = new EntityFieldQuery();

            $result = $query
              ->entityCondition('entity_type', 'taxonomy_term')
              ->entityCondition('bundle', 'tanks_and_displays')
              ->fieldCondition('field_is_wifi_spotty', 'value', '1', '=')
              ->fieldCondition('field_exhibit_or_theme', 'tid', $tids, 'IN')
              ->execute();

            if (isset($result['taxonomy_term'])) {
                // load term data for query results
                $tids = array_keys($result['taxonomy_term']);
                $terms = taxonomy_term_load_multiple($tids);

                // send notification for each if needed
                $tanksToNotify = array();

                foreach ($terms as $myTerm) {
                    if (_calacademy_wifi_notify_is_notification_ready($myTerm)) {
                        $tanksToNotify[] = $myTerm;
                    }
                }

                _calacademy_wifi_notify_send_notification($tanksToNotify);
            }

            break;
    }
}

function calacademy_wifi_notify_node_presave($node) {
    // skip if wrong type or not published
    if ($node->type != 'organism' || $node->status != NODE_PUBLISHED) return;

    // no values
    if (_calacademy_wifi_notify_is_empty($node->field_tank_or_display)) return;

    $tids = $node->field_tank_or_display['und'];
    $tanksToNotify = array();
    
    foreach ($tids as $tid) {
        // get info for each tank specified
        $term = taxonomy_term_load($tid['tid']);

        if ($term === FALSE) continue;
        if (!_calacademy_wifi_notify_is_notification_ready($term)) continue;

        $tanksToNotify[] = $term;        
    }

    _calacademy_wifi_notify_send_notification($tanksToNotify);
}

function _calacademy_wifi_notify_send_notification($term) {    
    if (empty($term)) return;

    // if not an array, create one
    if (!is_array($term)) {
        $term = array($term);
    }

    // send notification
    global $user;
    
    if (count($term) > 1) {
        $msgBody = t('The following tanks were updated by ' . $user->name . ' at ' . date('Y-m-d H:i:s'));
        $msgBody .= "\n\n";
        
        foreach ($term as $t) {
            $msgBody .= $t->name . "\n";
        }
    } else {
        $msgBody = t($term[0]->name . ' updated by ' . $user->name . ' at ' . date('Y-m-d H:i:s'));    
    }

    $params = array(
        'body' => $msgBody,
        'subject' => 'Aquarium iPads / Update Notification'
    );

    if (CALACADEMY_WIFI_NOTIFY_DEBUG) {
        error_log($msgBody);
        $message = array('result' => TRUE);
    } else {
        $message = drupal_mail('calacademy_wifi_notify', 'notification', CALACADEMY_WIFI_NOTIFY_RECIPIENT, language_default(), $params, $user->mail);    
    }
    
    // set drupal message with notification details
    if (count($term) > 1) {
        $responseTankName = '';

        foreach ($term as $i => $t) {
            if ($i == count($term) - 1) {
                // last
                $responseTankName .= ' and ';
            } else if ($i > 0) {
                // middle
                $responseTankName .= ', ';    
            }

            $responseTankName .= $t->name; 
        }

        $responseVerb = 'are';
    } else {
        $responseTankName = $term[0]->name;
        $responseVerb = 'is';    
    }

    if ($message['result']) {
        drupal_set_message(t('<strong>' . $responseTankName . '</strong> ' . $responseVerb . ' known to have spotty wifi connectivity. Update notification sent to <em>' . CALACADEMY_WIFI_NOTIFY_RECIPIENT . '</em>.'));
        
        // update timestamp if successful send
        foreach ($term as $t) {
            $t->field_last_notification_sent = array(
                'und' => array(
                    0 => array(
                        'value' => time()
                    )
                )
            );

            $t->sendingNotification = TRUE;
            taxonomy_term_save($t);
        }
    } else {
        drupal_set_message(t('<strong>' . $responseTankName . '</strong> ' . $responseVerb . ' known to have spotty wifi connectivity. However, the update notification failed to send! Please contact <em>' . CALACADEMY_WIFI_NOTIFY_RECIPIENT . '</em>.'), 'error'); 
    }
}

function calacademy_wifi_notify_mail($key, &$message, $params) {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
}
